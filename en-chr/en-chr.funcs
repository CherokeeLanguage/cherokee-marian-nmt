function reformatAsSentences {
    cat "$1" | dos2unix \
    | perl -0 -C -lpe 's/\n([^\n])/ $1/g' \
    | perl -0 -C -lpe 's/\n+\s*/\n/g' \
    | perl -C -lpe 's/\0/\n/g' \
    | perl -C -lpe 's/ +/ /g' \
    | perl -C -lpe 's/([.?!;:])\s+/$1\n/g' \
    | perl -C -lpe 's/_//g'
}

function wgetIfNeeded {
    if [ -f "$1" ]; then return; fi
    wget -N -O /tmp/wget-temp.$$.txt "$2"
    mv -v "/tmp/wget-temp.$$.txt" "$1"
}

# calculate max word counts
function getMaxWordCount {
    cat $CORPUS.$1 | /git/marian/build/spm_encode --model "$MODELDIR/vocab.$1.spm" | wc -w -l | while read words lines; do
        echo "$(($lines / $words))"
        return
    done
}

# create alignment helper to improve word associations between languages. (In theory.)
# requires pretrained modles for SPM!
function doAlign {
    if [ $DOALIGN != 1 ]; then
        ALIGN_ARGS=""
        ALIGN_ARGS2=""
        return
    fi

   	cat $CORPUS.$L1 | /git/marian/build/spm_encode --model "$MODELDIR/vocab.$L1.spm" > $TEMPDIR/align.temp.$L1
	cat $CORPUS.$L2 | /git/marian/build/spm_encode --model "$MODELDIR/vocab.$L2.spm" > $TEMPDIR/align.temp.$L2
    
    ALIGNEDCORPUS="$WORKDIR"/corpus.align.$L1-$L2
    ALIGN_ARGS="--guided-alignment $ALIGNEDCORPUS"
    paste $TEMPDIR/align.temp.$L1 $TEMPDIR/align.temp.$L2 > $TEMPDIR/align.temp.$L1-$L2
    sed -i 's/\t/ ||| /g' $TEMPDIR/align.temp.$L1-$L2
	/git/fast_align/build/fast_align -vdo -i $TEMPDIR/align.temp.$L1-$L2 > $TEMPDIR/forward.align.$L1-$L2
	/git/fast_align/build/fast_align -vdor -i $TEMPDIR/align.temp.$L1-$L2 > $TEMPDIR/reverse.align.$L1-$L2
	/git/fast_align/build/atools -c grow-diag-final -i $TEMPDIR/forward.align.$L1-$L2 -j $TEMPDIR/reverse.align.$L1-$L2 > "$ALIGNEDCORPUS"
    
    ALIGNEDCORPUS2="$WORKDIR"/corpus.align.$L2-$L1
    ALIGN_ARGS2="--guided-alignment $ALIGNEDCORPUS2"
    paste $TEMPDIR/align.temp.$L2 $TEMPDIR/align.temp.$L1 > $TEMPDIR/align.temp.$L2-$L1
    sed -i 's/\t/ ||| /g' $TEMPDIR/align.temp.$L2-$L1
    /git/fast_align/build/fast_align -vdo -i $TEMPDIR/align.temp.$L2-$L1 > $TEMPDIR/forward.align.$L2-$L1
	/git/fast_align/build/fast_align -vdor -i $TEMPDIR/align.temp.$L2-$L1 > $TEMPDIR/reverse.align.$L2-$L1
	/git/fast_align/build/atools -c grow-diag-final -i $TEMPDIR/forward.align.$L2-$L1 -j $TEMPDIR/reverse.align.$L2-$L1 > "$ALIGNEDCORPUS2"
}

function translateEnToChr {
    cat "$1" | $MARIAN/build/marian-decoder -c "$MODELDIR"/model-$L1-$L2.npz.decoder.yml \
        -w 4096 --devices 0 -b 6 -n0.6
}

function translateChrToEn {
    cat "$1" | $MARIAN/build/marian-decoder -c "$MODELDIR"/model-$L2-$L1.npz.decoder.yml \
        -w 4096 --devices 0 -b 6 -n0.6
}

function corpusSplit {
    rm -v $TEMPDIR/corpus-?? 2> /dev/null || true
    split -n l/10 -e "$1" "$TEMPDIR/corpus-"
    cp /dev/null "$TEMPDIR/train-corpus.$L1-$L2.tsv"
    y=1
    for z in aa ab ac ad ae af ag ah ai aj; do
        if [ "$y" = "$2" ]; then
            cp "$TEMPDIR/corpus-$z" "$DEVCORPUS.$L1-$L2.tsv"
            cut -f 1 "$DEVCORPUS.$L1-$L2.tsv" > "$DEVCORPUS.$L1"
            cut -f 2 "$DEVCORPUS.$L1-$L2.tsv" > "$DEVCORPUS.$L2"
        else
            cat "$TEMPDIR/corpus-$z" >> "$TEMPDIR/train-corpus.$L1-$L2.tsv"
        fi 
        y="$(($y + 1))"
    done
    cut -f 1 "$TEMPDIR/train-corpus.$L1-$L2.tsv" > "$CORPUS.$L1"
    cut -f 2 "$TEMPDIR/train-corpus.$L1-$L2.tsv" > "$CORPUS.$L2"
}

